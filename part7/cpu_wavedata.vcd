$date
	Thu Jun 29 13:41:28 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var wire 128 ! inst_readdata [127:0] $end
$var wire 1 " inst_read $end
$var wire 1 # inst_busywait $end
$var wire 6 $ inst_address [5:0] $end
$var wire 1 % busywait $end
$var wire 32 & PC [31:0] $end
$var wire 32 ' INSTRUCTION [31:0] $end
$var reg 1 ( CLK $end
$var reg 1 ) RESET $end
$scope module instrcache $end
$var wire 1 ( clock $end
$var wire 1 * hitsignal $end
$var wire 1 ) reset $end
$var wire 3 + tag [2:0] $end
$var wire 1 , valid $end
$var wire 32 - instruction [31:0] $end
$var wire 128 . inst_readdata [127:0] $end
$var wire 1 # inst_busywait $end
$var wire 1 / comparatorsignal $end
$var wire 32 0 PC [31:0] $end
$var reg 10 1 address [9:0] $end
$var reg 1 % busywait $end
$var reg 128 2 data [127:0] $end
$var reg 6 3 inst_address [5:0] $end
$var reg 1 " inst_read $end
$var reg 2 4 next_state [1:0] $end
$var reg 2 5 state [1:0] $end
$var integer 32 6 i [31:0] $end
$upscope $end
$scope module instrmem $end
$var wire 6 7 address [5:0] $end
$var wire 1 ( clock $end
$var wire 1 " read $end
$var reg 1 # busywait $end
$var reg 1 8 readaccess $end
$var reg 128 9 readinst [127:0] $end
$upscope $end
$scope module mycpu $end
$var wire 1 ( CLK $end
$var wire 32 : INSTRUCTION [31:0] $end
$var wire 1 ) RESET $end
$var wire 1 % busywaitinstr $end
$var wire 1 ; writeSourceSelect $end
$var wire 1 < writeSelect $end
$var wire 1 = writeEn $end
$var wire 1 > sourceSelect $end
$var wire 1 ? signSelect $end
$var wire 8 @ regout2 [7:0] $end
$var wire 8 A regout1 [7:0] $end
$var wire 8 B regin [7:0] $end
$var wire 1 C readSelect $end
$var wire 1 D neqSelect $end
$var wire 8 E negOut [7:0] $end
$var wire 8 F muxSourceOut [7:0] $end
$var wire 8 G muxNegOut [7:0] $end
$var wire 32 H mem_writedata [31:0] $end
$var wire 1 I mem_write $end
$var wire 32 J mem_readdata [31:0] $end
$var wire 1 K mem_read $end
$var wire 1 L mem_busywait $end
$var wire 6 M mem_address [5:0] $end
$var wire 32 N jumpedPC [31:0] $end
$var wire 1 O jumpSelect $end
$var wire 32 P finalPC [31:0] $end
$var wire 32 Q extendedValue [31:0] $end
$var wire 1 R eqSelect $end
$var wire 8 S dmout [7:0] $end
$var wire 1 T busyWait $end
$var wire 1 U Zero $end
$var wire 32 V PCout [31:0] $end
$var wire 8 W ALUres [7:0] $end
$var wire 3 X ALUopcode [2:0] $end
$var reg 32 Y PC [31:0] $end
$scope module badder $end
$var wire 32 Z offset [31:0] $end
$var wire 32 [ finalPC [31:0] $end
$var wire 32 \ currPC [31:0] $end
$upscope $end
$scope module control $end
$var wire 8 ] opcode [7:0] $end
$var reg 3 ^ ALUOP [2:0] $end
$var reg 1 R eqSelect $end
$var reg 1 O jumpSelect $end
$var reg 1 D neqSelect $end
$var reg 1 C readSelect $end
$var reg 1 ? signSelect $end
$var reg 1 > sourceSelect $end
$var reg 1 = writeEn $end
$var reg 1 < writeSelect $end
$var reg 1 ; writeSourceSelect $end
$upscope $end
$scope module dcache $end
$var wire 1 ( clock $end
$var wire 3 _ comparatorTagIN [2:0] $end
$var wire 32 ` data [31:0] $end
$var wire 1 a dirty $end
$var wire 1 b hit $end
$var wire 1 C read $end
$var wire 8 c readdata [7:0] $end
$var wire 1 ) reset $end
$var wire 1 < write $end
$var wire 8 d writedata [7:0] $end
$var wire 32 e mem_Writedata [31:0] $end
$var wire 1 I mem_Write $end
$var wire 32 f mem_Readdata [31:0] $end
$var wire 1 K mem_Read $end
$var wire 1 L mem_BusyWait $end
$var wire 6 g mem_Address [5:0] $end
$var wire 8 h dataExtractMuxOut [7:0] $end
$var wire 1 i controllerBusywait $end
$var wire 1 j comparatorOut $end
$var wire 1 T busywait $end
$var wire 8 k address [7:0] $end
$var reg 1 l Busywait $end
$var reg 3 m Index [2:0] $end
$var reg 2 n Offset [1:0] $end
$var reg 1 o READACCESS $end
$var reg 3 p Tag [2:0] $end
$var reg 3 q Tag1 [2:0] $end
$var reg 1 r WRITEACCESS $end
$var reg 32 s writedata1 [31:0] $end
$var integer 32 t i [31:0] $end
$scope module cachectrl $end
$var wire 3 u Index [2:0] $end
$var wire 3 v Tag [2:0] $end
$var wire 3 w Tag1 [2:0] $end
$var wire 1 ( clock $end
$var wire 1 a dirty $end
$var wire 1 b hit $end
$var wire 1 C read $end
$var wire 1 ) reset $end
$var wire 1 < write $end
$var wire 32 x writedata [31:0] $end
$var wire 1 L mem_Busywait $end
$var wire 8 y address [7:0] $end
$var reg 1 i busywait $end
$var reg 6 z mem_address [5:0] $end
$var reg 1 K mem_read $end
$var reg 1 I mem_write $end
$var reg 32 { mem_writedata [31:0] $end
$var reg 3 | next_state [2:0] $end
$var reg 3 } state [2:0] $end
$upscope $end
$scope module comparator $end
$var wire 3 ~ IN1 [0:2] $end
$var wire 3 !" IN2 [0:2] $end
$var wire 1 j OUT $end
$upscope $end
$scope module dataExtractMux $end
$var wire 8 "" IN1 [7:0] $end
$var wire 8 #" IN2 [7:0] $end
$var wire 8 $" IN3 [7:0] $end
$var wire 8 %" IN4 [7:0] $end
$var wire 2 &" SELECT [1:0] $end
$var wire 8 '" OUT [7:0] $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 6 (" address [5:0] $end
$var wire 1 ( clock $end
$var wire 1 K read $end
$var wire 1 ) reset $end
$var wire 1 I write $end
$var wire 32 )" writedata [31:0] $end
$var reg 1 L busywait $end
$var reg 1 *" readaccess $end
$var reg 32 +" readdata [31:0] $end
$var reg 1 ," writeaccess $end
$var integer 32 -" i [31:0] $end
$upscope $end
$scope module jump $end
$var wire 1 R eqSelect $end
$var wire 32 ." input2 [31:0] $end
$var wire 1 O jumpSelect $end
$var wire 1 D neqselect $end
$var wire 32 /" input1 [31:0] $end
$var wire 1 U Zero $end
$var reg 32 0" result [31:0] $end
$upscope $end
$scope module muxNeg $end
$var wire 1 ? select $end
$var wire 8 1" input2 [7:0] $end
$var wire 8 2" input1 [7:0] $end
$var reg 8 3" result [7:0] $end
$upscope $end
$scope module muxSrc $end
$var wire 8 4" input1 [7:0] $end
$var wire 8 5" input2 [7:0] $end
$var wire 1 > select $end
$var reg 8 6" result [7:0] $end
$upscope $end
$scope module myalu $end
$var wire 8 7" DATA2 [7:0] $end
$var wire 3 8" SELECT [2:0] $end
$var wire 8 9" wire5 [7:0] $end
$var wire 8 :" wire4 [7:0] $end
$var wire 8 ;" wire3 [7:0] $end
$var wire 8 <" wire2 [7:0] $end
$var wire 8 =" wire1 [7:0] $end
$var wire 8 >" DATA1 [7:0] $end
$var reg 8 ?" RESULT [7:0] $end
$var reg 1 U ZERO $end
$scope module add1 $end
$var wire 8 @" DATA2 [7:0] $end
$var wire 8 A" DATA1 [7:0] $end
$var reg 8 B" RESULT [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 C" DATA2 [7:0] $end
$var wire 8 D" DATA1 [7:0] $end
$var reg 8 E" RESULT [7:0] $end
$upscope $end
$scope module forward1 $end
$var wire 8 F" DATA2 [7:0] $end
$var wire 8 G" DATA1 [7:0] $end
$var reg 8 H" RESULT [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 I" DATA2 [7:0] $end
$var wire 8 J" DATA1 [7:0] $end
$var reg 8 K" RESULT [7:0] $end
$upscope $end
$scope module shift $end
$var wire 8 L" im [7:0] $end
$var wire 8 M" rshiftA [7:0] $end
$var wire 8 N" rshift [7:0] $end
$var wire 8 O" rrotate [7:0] $end
$var wire 8 P" lshiftA [7:0] $end
$var wire 8 Q" lshift [7:0] $end
$var wire 8 R" lrotate [7:0] $end
$var wire 8 S" in [7:0] $end
$var reg 8 T" out [7:0] $end
$scope module lr $end
$var wire 8 U" out [7:0] $end
$var wire 3 V" shift [2:0] $end
$var wire 8 W" in [7:0] $end
$var reg 8 X" result [7:0] $end
$upscope $end
$scope module ls $end
$var wire 8 Y" out [7:0] $end
$var wire 3 Z" shift [2:0] $end
$var wire 8 [" in [7:0] $end
$var reg 8 \" result [7:0] $end
$upscope $end
$scope module lsa $end
$var wire 8 ]" out [7:0] $end
$var wire 3 ^" shift [2:0] $end
$var wire 8 _" in [7:0] $end
$var reg 8 `" result [7:0] $end
$upscope $end
$scope module rr $end
$var wire 8 a" out [7:0] $end
$var wire 3 b" shift [2:0] $end
$var wire 8 c" in [7:0] $end
$var reg 8 d" result [7:0] $end
$upscope $end
$scope module rs $end
$var wire 8 e" out [7:0] $end
$var wire 3 f" shift [2:0] $end
$var wire 8 g" in [7:0] $end
$var reg 8 h" result [7:0] $end
$upscope $end
$scope module rsa $end
$var wire 8 i" out [7:0] $end
$var wire 3 j" shift [2:0] $end
$var wire 8 k" in [7:0] $end
$var reg 8 l" result [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module neg $end
$var wire 8 m" Output [7:0] $end
$var wire 8 n" Input [7:0] $end
$upscope $end
$scope module pcadd $end
$var wire 32 o" PC [31:0] $end
$var wire 32 p" PCplus4 [31:0] $end
$upscope $end
$scope module reginSrc $end
$var wire 8 q" input1 [7:0] $end
$var wire 8 r" input2 [7:0] $end
$var wire 1 ; select $end
$var reg 8 s" result [7:0] $end
$upscope $end
$scope module register $end
$var wire 1 ( CLK $end
$var wire 8 t" IN [7:0] $end
$var wire 3 u" INADDRESS [2:0] $end
$var wire 8 v" OUT1 [7:0] $end
$var wire 3 w" OUT1ADDRESS [2:0] $end
$var wire 8 x" OUT2 [7:0] $end
$var wire 3 y" OUT2ADDRESS [2:0] $end
$var wire 1 ) RESET $end
$var wire 1 = WRITE $end
$var integer 32 z" i [31:0] $end
$upscope $end
$scope module signext $end
$var wire 8 {" short [7:0] $end
$var wire 32 |" long [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx00 |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
b100000000 -"
0,"
bx +"
0*"
b0xxxxxxxx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
b0 }
b0 |
b0xxxxxxxx {
bx z
bx y
bx x
bx w
bx v
bx u
b100000 t
bx s
0r
bx q
bx p
0o
bx n
bx m
0l
bx k
xj
0i
bx h
bx g
bx f
b0xxxxxxxx e
bx d
bx c
xb
xa
bx `
bx _
bx ^
bx ]
bx \
bx [
bx00 Z
bx Y
bx X
bx W
bx V
xU
0T
bx S
xR
bx00 Q
bx P
xO
bx N
bx M
0L
0K
bx J
0I
b0xxxxxxxx H
bx G
bx F
bx E
xD
xC
bx B
bx A
bx @
x?
x>
x=
x<
x;
bx :
bx 9
08
bx 7
b1000 6
b0 5
b0 4
bx 3
bx 2
bx 1
bx 0
x/
bx .
bx -
x,
bx +
x*
1)
0(
bx '
bx &
0%
bx $
0#
0"
bx !
$end
#40
b1000 z"
1(
#50
b100 P
b100 0"
1%
b0 1
b1000 6
b100 V
b100 \
b100 /"
b100 p"
b0 &
b0 0
b0 Y
b0 o"
0)
#60
b1 4
0*
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2
0,
#80
0(
#120
18
1#
b0 $
b0 3
b0 7
1"
b1 4
b1 5
1(
#160
0(
#200
1(
#240
0(
#280
1(
#320
0(
#360
1(
#400
0(
#440
1(
#480
0(
#520
1(
#560
0(
#600
1(
bx00011001 !
bx00011001 .
bx00011001 9
#640
0(
#680
1(
#720
0(
#760
1(
#800
0(
#840
1(
#880
0(
#920
1(
#960
0(
#1000
1(
bx0000000000011001 !
bx0000000000011001 .
bx0000000000011001 9
#1040
0(
#1080
1(
#1120
0(
#1160
1(
#1200
0(
#1240
1(
#1280
0(
#1320
1(
#1360
0(
#1400
1(
bx000001000000000000011001 !
bx000001000000000000011001 .
bx000001000000000000011001 9
#1440
0(
#1480
1(
#1520
0(
#1560
1(
#1600
0(
#1640
1(
#1680
0(
#1720
1(
#1760
0(
#1800
1(
bx00000000000001000000000000011001 !
bx00000000000001000000000000011001 .
bx00000000000001000000000000011001 9
#1840
0(
#1880
1(
#1920
0(
#1960
1(
#2000
0(
#2040
1(
#2080
0(
#2120
1(
#2160
0(
#2200
1(
bx0010001100000000000001000000000000011001 !
bx0010001100000000000001000000000000011001 .
bx0010001100000000000001000000000000011001 9
#2240
0(
#2280
1(
#2320
0(
#2360
1(
#2400
0(
#2440
1(
#2480
0(
#2520
1(
#2560
0(
#2600
1(
bx000000000010001100000000000001000000000000011001 !
bx000000000010001100000000000001000000000000011001 .
bx000000000010001100000000000001000000000000011001 9
#2640
0(
#2680
1(
#2720
0(
#2760
1(
#2800
0(
#2840
1(
#2880
0(
#2920
1(
#2960
0(
#3000
1(
bx00000101000000000010001100000000000001000000000000011001 !
bx00000101000000000010001100000000000001000000000000011001 .
bx00000101000000000010001100000000000001000000000000011001 9
#3040
0(
#3080
1(
#3120
0(
#3160
1(
#3200
0(
#3240
1(
#3280
0(
#3320
1(
#3360
0(
#3400
1(
bx0000000000000101000000000010001100000000000001000000000000011001 !
bx0000000000000101000000000010001100000000000001000000000000011001 .
bx0000000000000101000000000010001100000000000001000000000000011001 9
#3440
0(
#3480
1(
#3520
0(
#3560
1(
#3600
0(
#3640
1(
#3680
0(
#3720
1(
#3760
0(
#3800
1(
bx000001010000000000000101000000000010001100000000000001000000000000011001 !
bx000001010000000000000101000000000010001100000000000001000000000000011001 .
bx000001010000000000000101000000000010001100000000000001000000000000011001 9
#3840
0(
#3880
1(
#3920
0(
#3960
1(
#4000
0(
#4040
1(
#4080
0(
#4120
1(
#4160
0(
#4200
1(
bx00000100000001010000000000000101000000000010001100000000000001000000000000011001 !
bx00000100000001010000000000000101000000000010001100000000000001000000000000011001 .
bx00000100000001010000000000000101000000000010001100000000000001000000000000011001 9
#4240
0(
#4280
1(
#4320
0(
#4360
1(
#4400
0(
#4440
1(
#4480
0(
#4520
1(
#4560
0(
#4600
1(
bx0000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 !
bx0000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 .
bx0000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 9
#4640
0(
#4680
1(
#4720
0(
#4760
1(
#4800
0(
#4840
1(
#4880
0(
#4920
1(
#4960
0(
#5000
1(
bx000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 !
bx000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 .
bx000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 9
#5040
0(
#5080
1(
#5120
0(
#5160
1(
#5200
0(
#5240
1(
#5280
0(
#5320
1(
#5360
0(
#5400
1(
bx01011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 !
bx01011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 .
bx01011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 9
#5440
0(
#5480
1(
#5520
0(
#5560
1(
#5600
0(
#5640
1(
#5680
0(
#5720
1(
#5760
0(
#5800
1(
bx0000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 !
bx0000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 .
bx0000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 9
#5840
0(
#5880
1(
#5920
0(
#5960
1(
#6000
0(
#6040
1(
#6080
0(
#6120
1(
#6160
0(
#6200
1(
bx000000010000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 !
bx000000010000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 .
bx000000010000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 9
#6240
0(
#6280
1(
#6320
0(
#6360
1(
#6400
0(
#6440
1(
#6480
0(
#6520
1(
#6560
0(
#6600
bx $
bx 3
bx 7
0"
b10 5
b0 4
1(
08
0#
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 !
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 .
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 9
#6620
x*
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000011001 2
1,
b0 +
#6629
1*
1/
#6630
b10100 N
b10100 [
b10100 ."
b10000 Q
b10000 Z
b10000 |"
b0 ]
b100 u"
b0 w"
b1 y"
b11001 5"
b100 {"
b1000000000000011001 '
b1000000000000011001 -
b1000000000000011001 :
#6640
bx0 \"
b0xxxxxxx h"
bx0 `"
bx0xxxxxx l"
b1 Z"
b1 f"
b1 ^"
b1 j"
b1 V"
b1 b"
b11001 F
b11001 6"
b11001 7"
b11001 @"
b11001 C"
b11001 F"
b11001 I"
b11001 L"
0;
0C
0<
0D
0R
0O
1=
1>
0?
b0 X
b0 ^
b0 8"
0(
#6650
b11001 B
b11001 s"
b11001 t"
b0 X"
b0 \"
b0 `"
b0 d"
b0 h"
b0 l"
b0 G
b0 3"
b0 4"
b11001 :"
b11001 K"
b0 ;"
b0 E"
b11001 W
b11001 k
b11001 y
b11001 ?"
b11001 q"
b11001 ="
b11001 H"
b0 A
b0 d
b0 >"
b0 A"
b0 D"
b0 G"
b0 J"
b0 S"
b0 W"
b0 ["
b0 _"
b0 c"
b0 g"
b0 k"
b0 v"
b0 @
b0 2"
b0 n"
b0 x"
#6660
0U
b0 E
b0 1"
b0 m"
b11001 <"
b11001 B"
#6680
b0 5
0%
b0 R"
b0 U"
b0 9"
b0 T"
b0 Q"
b0 Y"
b0 P"
b0 ]"
b0 O"
b0 a"
b0 N"
b0 e"
b0 M"
b0 i"
1(
#6720
0(
#6760
1(
#6770
b1000 P
b1000 0"
1%
b100 1
b11000 N
b11000 [
b11000 ."
b1000 V
b1000 \
b1000 /"
b1000 p"
b100 &
b100 0
b100 Y
b100 o"
#6780
b11 Z"
b11 f"
b11 ^"
b11 j"
b11 V"
b11 b"
b100011 F
b100011 6"
b100011 7"
b100011 @"
b100011 C"
b100011 F"
b100011 I"
b100011 L"
b11100 N
b11100 [
b11100 ."
b10100 Q
b10100 Z
b10100 |"
b101 u"
b11 y"
b100011 5"
b101 {"
b1010000000000100011 '
b1010000000000100011 -
b1010000000000100011 :
#6790
b100011 B
b100011 s"
b100011 t"
b100011 W
b100011 k
b100011 y
b100011 ?"
b100011 q"
b100011 ="
b100011 H"
b100011 :"
b100011 K"
#6800
b100011 <"
b100011 B"
0(
#6840
0%
1(
#6880
0(
#6920
1(
#6930
b1100 P
b1100 0"
1%
b1000 1
b100000 N
b100000 [
b100000 ."
b1100 V
b1100 \
b1100 /"
b1100 p"
b1000 &
b1000 0
b1000 Y
b1000 o"
#6940
b101 Z"
b101 f"
b101 ^"
b101 j"
b101 V"
b101 b"
b101 F
b101 6"
b101 7"
b101 @"
b101 C"
b101 F"
b101 I"
b101 L"
b100100 N
b100100 [
b100100 ."
b11000 Q
b11000 Z
b11000 |"
b10 ]
b110 u"
b100 w"
b101 y"
b101 5"
b110 {"
b10000001100000010000000101 '
b10000001100000010000000101 -
b10000001100000010000000101 :
#6950
b0 Z"
b0 f"
b0 ^"
b0 j"
b0 V"
b0 b"
b0 F
b0 6"
b0 7"
b0 @"
b0 C"
b0 F"
b0 I"
b0 L"
b101 :"
b101 K"
b100011 W
b100011 k
b100011 y
b100011 ?"
b100011 q"
b101 ="
b101 H"
0>
b1 X
b1 ^
b1 8"
#6960
b11 Z"
b11 f"
b11 ^"
b11 j"
b11 V"
b11 b"
b100011 F
b100011 6"
b100011 7"
b100011 @"
b100011 C"
b100011 F"
b100011 I"
b100011 L"
b11001 B
b11001 s"
b11001 t"
b11001000 X"
b11001000 \"
b1001000 `"
b100011 d"
b11 h"
b11 l"
b100011 G
b100011 3"
b100011 4"
b0 ="
b0 H"
b11001 :"
b11001 K"
b11001 W
b11001 k
b11001 y
b11001 ?"
b11001 q"
b11001 <"
b11001 B"
b11001 A
b11001 d
b11001 >"
b11001 A"
b11001 D"
b11001 G"
b11001 J"
b11001 S"
b11001 W"
b11001 ["
b11001 _"
b11001 c"
b11001 g"
b11001 k"
b11001 v"
b100011 @
b100011 2"
b100011 n"
b100011 x"
0(
#6970
b111011 :"
b111011 K"
b1 ;"
b1 E"
b100011 ="
b100011 H"
b11011101 E
b11011101 1"
b11011101 m"
#6980
b111100 B
b111100 s"
b111100 t"
b111100 W
b111100 k
b111100 y
b111100 ?"
b111100 q"
b111100 <"
b111100 B"
#6990
b11001000 R"
b11001000 U"
b11001000 Q"
b11001000 Y"
b1001000 P"
b1001000 ]"
b100011 O"
b100011 a"
b11 9"
b11 T"
b11 N"
b11 e"
b11 M"
b11 i"
#7000
0%
1(
#7040
0(
#7080
1(
#7090
b10000 P
b10000 0"
1%
b1100 1
b101000 N
b101000 [
b101000 ."
b10000 V
b10000 \
b10000 /"
b10000 p"
b1100 &
b1100 0
b1100 Y
b1100 o"
#7100
b10100 N
b10100 [
b10100 ."
b100 Q
b100 Z
b100 |"
b0 ]
b1 u"
b0 w"
b10 y"
b1011010 5"
b1 {"
b10000000001011010 '
b10000000001011010 -
b10000000001011010 :
#7110
b1100100 \"
b110 h"
b1100100 `"
b110 l"
b1100100 X"
b1000110 d"
b1001000 9"
b1001000 T"
b10 Z"
b10 f"
b10 ^"
b10 j"
b10 V"
b10 b"
b100011 B
b100011 s"
b100011 t"
b1011010 F
b1011010 6"
b1011010 7"
b1011010 @"
b1011010 C"
b1011010 F"
b1011010 I"
b1011010 L"
b100011 W
b100011 k
b100011 y
b100011 ?"
b100011 q"
1>
b0 X
b0 ^
b0 8"
#7120
b1011010 B
b1011010 s"
b1011010 t"
b0 X"
b0 \"
b0 `"
b0 d"
b0 h"
b0 l"
b0 G
b0 3"
b0 4"
b1011010 W
b1011010 k
b1011010 y
b1011010 ?"
b1011010 q"
b1011010 ="
b1011010 H"
b0 ;"
b0 E"
b1011010 :"
b1011010 K"
b0 A
b0 d
b0 >"
b0 A"
b0 D"
b0 G"
b0 J"
b0 S"
b0 W"
b0 ["
b0 _"
b0 c"
b0 g"
b0 k"
b0 v"
b0 @
b0 2"
b0 n"
b0 x"
0(
#7130
b0 E
b0 1"
b0 m"
b1011010 <"
b1011010 B"
#7150
b0 R"
b0 U"
b0 Q"
b0 Y"
b0 9"
b0 T"
b0 P"
b0 ]"
b0 O"
b0 a"
b0 N"
b0 e"
b0 M"
b0 i"
#7160
0%
1(
#7200
0(
#7240
1(
#7250
b10100 P
b10100 0"
1%
b10000 1
b11000 N
b11000 [
b11000 ."
b10100 V
b10100 \
b10100 /"
b10100 p"
b10000 &
b10000 0
b10000 Y
b10000 o"
#7260
b1 Z"
b1 f"
b1 ^"
b1 j"
b1 V"
b1 b"
b11001 F
b11001 6"
b11001 7"
b11001 @"
b11001 C"
b11001 F"
b11001 I"
b11001 L"
b100100 N
b100100 [
b100100 ."
b10000 Q
b10000 Z
b10000 |"
b1 4
b100 u"
b1 y"
b11001 5"
b100 {"
0*
b1000000000000011001 '
b1000000000000011001 -
b1000000000000011001 :
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2
0,
bx +
#7269
x/
#7270
bx 9"
bx T"
bx Z"
bx f"
bx ^"
bx j"
bx V"
bx b"
bx F
bx 6"
bx 7"
bx @"
bx C"
bx F"
bx I"
bx L"
bx N
bx [
bx ."
bx00 Q
bx00 Z
bx00 |"
bx ]
bx u"
bx w"
bx y"
bx 5"
bx {"
b11001 B
b11001 s"
b11001 t"
bx '
bx -
bx :
b11001 :"
b11001 K"
b11001 W
b11001 k
b11001 y
b11001 ?"
b11001 q"
b11001 ="
b11001 H"
#7280
bx B
bx s"
bx t"
bx W
bx k
bx y
bx ?"
bx q"
bx ="
bx H"
bx :"
bx K"
bx <"
bx B"
0(
#7290
bx X"
bx \"
bx `"
bx d"
bx h"
bx l"
bx G
bx 3"
bx 4"
bx A
bx d
bx >"
bx A"
bx D"
bx G"
bx J"
bx S"
bx W"
bx ["
bx _"
bx c"
bx g"
bx k"
bx v"
bx @
bx 2"
bx n"
bx x"
#7300
bx ;"
bx E"
bx E
bx 1"
bx m"
#7320
18
1#
b1 $
b1 3
b1 7
1"
b1 4
b1 5
bx R"
bx U"
bx Q"
bx Y"
bx P"
bx ]"
bx O"
bx a"
bx N"
bx e"
bx M"
bx i"
1(
#7360
0(
#7400
1(
#7440
0(
#7480
1(
#7520
0(
#7560
1(
#7600
0(
#7640
1(
#7680
0(
#7720
1(
#7760
0(
#7800
1(
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000000100 !
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000000100 .
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000000000100 9
#7840
0(
#7880
1(
#7920
0(
#7960
1(
#8000
0(
#8040
1(
#8080
0(
#8120
1(
#8160
0(
#8200
1(
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000100000100 !
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000100000100 .
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000001000000000100000100 9
#8240
0(
#8280
1(
#8320
0(
#8360
1(
#8400
0(
#8440
1(
#8480
0(
#8520
1(
#8560
0(
#8600
1(
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000000010000000100000100 !
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000000010000000100000100 .
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000000000000010000000100000100 9
#8640
0(
#8680
1(
#8720
0(
#8760
1(
#8800
0(
#8840
1(
#8880
0(
#8920
1(
#8960
0(
#9000
1(
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000011000000010000000100000100 !
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000011000000010000000100000100 .
b10000000001011010000000100000011000000100000001010000000000000101000000000010001100000011000000010000000100000100 9
#9040
0(
#9080
1(
#9120
0(
#9160
1(
#9200
0(
#9240
1(
#9280
0(
#9320
1(
#9360
0(
#9400
1(
b1000000000101101000000010000001100000010000000101000000000000010100000000xxxxxxxx00000011000000010000000100000100 !
b1000000000101101000000010000001100000010000000101000000000000010100000000xxxxxxxx00000011000000010000000100000100 .
b1000000000101101000000010000001100000010000000101000000000000010100000000xxxxxxxx00000011000000010000000100000100 9
#9440
0(
#9480
1(
#9520
0(
#9560
1(
#9600
0(
#9640
1(
#9680
0(
#9720
1(
#9760
0(
#9800
1(
b10000000001011010000000100000011000000100000001010000000000000101xxxxxxxxxxxxxxxx00000011000000010000000100000100 !
b10000000001011010000000100000011000000100000001010000000000000101xxxxxxxxxxxxxxxx00000011000000010000000100000100 .
b10000000001011010000000100000011000000100000001010000000000000101xxxxxxxxxxxxxxxx00000011000000010000000100000100 9
#9840
0(
#9880
1(
#9920
0(
#9960
1(
#10000
0(
#10040
1(
#10050
